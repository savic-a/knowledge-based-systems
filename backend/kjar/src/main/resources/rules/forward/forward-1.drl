import com.ftn.sbnz.model.Client;
import com.ftn.sbnz.enumeration.Category
import com.ftn.sbnz.model.Transaction;
import com.ftn.sbnz.model.Warning;
import java.util.Calendar;
import java.sql.Timestamp;
import java.util.List;


// rule "Generate Mild Warning for Excessive Spending"
//     when
//         $client: Client($clientId: id)
//         $currentMonthIncome: Number(doubleValue > 0) from accumulate(
//             $t1: Transaction(
//                 clientId == $clientId, 
//                 type == Transaction.Type.INCOME, 
//                 date >= startOfMonth(), 
//                 date <= today()), 
//             sum($t1.getValue())
//         )
//         // $category: Category()
//         $transactions: List() from accumulate(
//             Transaction(clientId == $clientId, category == Category.SHOPPING, value > 0, date >= startOfMonth(), date <= today()), // Add date condition to filter transactions for the current month
//             collectList()
//         )
//         $totalSpending: Number(doubleValue > 0) from accumulate(
//             $t3: Transaction(clientId == $clientId, category == Category.SHOPPING, value > 0, date >= startOfMonth(), date <= today()), 
//             sum($t3.getValue())
//         )
//         eval($transactions.size() >= 3)
//         eval($totalSpending.doubleValue() > ($currentMonthIncome.doubleValue() * 0.1))
//     then
//         System.out.println("Mild warning generated for client " + $transactions.size());
//         insert(new Warning($clientId, "Mild", "You have spent more than 10% of your monthly income on SHOPPING."));
//         // String categoryName = $category.name();
//         System.out.println("Mild warning generated for client " + $clientId + " in category ");
// end

// Utility functions to get start of the current month and current day
function Timestamp startOfMonth() {
    Calendar cal = Calendar.getInstance();
    cal.set(Calendar.DAY_OF_MONTH, 1);
    cal.set(Calendar.HOUR_OF_DAY, 0);
    cal.set(Calendar.MINUTE, 0);
    cal.set(Calendar.SECOND, 0);
    cal.set(Calendar.MILLISECOND, 0);
    return new Timestamp(cal.getTimeInMillis());
}

function Timestamp today() {
    Calendar cal = Calendar.getInstance();
    cal.set(Calendar.HOUR_OF_DAY, 23);
    cal.set(Calendar.MINUTE, 59);
    cal.set(Calendar.SECOND, 59);
    cal.set(Calendar.MILLISECOND, 999);
    return new Timestamp(cal.getTimeInMillis());
}


rule "Set Flag1 for 3 Purchases in a Category"
    when
        $client: Client($clientId: id)
        $category: Category() from Category.values() 
        $transactions: List(size >= 3) from accumulate(
            Transaction(clientId == $clientId, category == $category, value > 0, date >= startOfMonth(), date <= today()), 
            collectList()
        )
    then
        // todo - izmeni flag, kod klijenta verovatno ce biti 
        // insert(new Flag1($clientId, $category));
        System.out.println("Flag1 set for client " + $clientId + " in category " + $category.name());
        // System.out.println("Flag1 set for client " + $clientId + " in category ");
end
