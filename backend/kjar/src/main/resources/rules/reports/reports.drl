import com.ftn.sbnz.model.FirstOfMonthEvent;
import com.ftn.sbnz.model.Alarm;
import com.ftn.sbnz.model.Report;
import com.ftn.sbnz.model.Transaction;
import java.util.Date;
import java.util.Calendar;
import java.sql.Timestamp;
// import org.drools.core.base.accumulators.CollectListAccumulateFunction;
// import org.drools.core.base.accumulators.MVELAccumulateFunction;
import java.util.List;


global java.util.Date lastTriggerDate;


function Timestamp getLastMonthStartDate() {
    Calendar cal = Calendar.getInstance();
    cal.add(Calendar.MONTH, -1);
    cal.set(Calendar.DAY_OF_MONTH, 1);
    return new Timestamp(cal.getTimeInMillis());
}

function boolean isWithinLast30Days(Timestamp timestamp) {
    long currentTime = System.currentTimeMillis();
    long thirtyDaysInMillis = 30 * 24 * 60 * 60 * 1000L; // 30 days in milliseconds
    long thresholdTime = currentTime - thirtyDaysInMillis;
    return timestamp.getTime() > thresholdTime;
}


rule "First of the Month"
    timer (cron: 0 0 0 1 * ?)  // fire at midnight (00:00) on the first day of every month
    when
        eval(lastTriggerDate == null || lastTriggerDate.getMonth() != new java.util.Date().getMonth())
    then
        lastTriggerDate = new java.util.Date();
        System.out.println("Starting new month...");
        new FirstOfMonthEvent();
end


// rule "Calculate Last Month's Income"
//     when
//     // TODO: check which client and do this for each client
//         FirstOfMonthEvent()
//         $transactions: List() // Create a new list to hold transactions
//         $transaction: Transaction(type == Transaction.Type.INCOME, date >= getLastMonthStartDate()) // Match any Transaction
//         // accumulate($transaction: Transaction(clientId != null, clientId == $transactions.get(0).getClientId()) 
//         //     from $transactions,
//         //     $totalIncome: sum($transaction.getValue()),
//         //     $incomeTransactions : collectList($transaction))
//     then
//         // System.out.println("Total income:");
//         // System.out.println($totalIncome);
//         // System.out.println("Income transactions:");
//         // System.out.println($incomeTransactions);
//         // System.out.println($value);
//         $transactions.add($transaction);
//         System.out.println("neke transakcije");
//         System.out.println($transaction);
//         Report report = new Report(1L, 0, "Total Income for the Last Month i ovdje dodati + value", new Timestamp(System.currentTimeMillis()), 1L);
// end

// rule "Calculate Sum of Incomes for Each clientId in Last Month"
// when
//     $transactions: List(size > 0) from collect(Transaction(type == Transaction.Type.INCOME, $clientId : clientId, $value : value, $date : date))
//     // eval($transactions != null && !$transactions.isEmpty())
//     // $clientIdSumMap: Map() from accumulate(
//     //     Transaction($clientId : clientId, $value : value, $date : date, type == Transaction.Type.INCOME) over window:time(30d),
//     //     init(Map map = new HashMap();),
//     //     action(Map map, Transaction t) { map.merge($clientId, t.getValue(), (oldValue, newValue) -> oldValue + newValue); },
//     //     reverse(Map map) { map.clear(); },
//     //     result($clientIdSumMap)
//     // )
// then
//     System.out.println("Sum of incomes for each clientId in the last month:");
//     for (Map.Entry<Long, Double> entry : $clientIdSumMap.entrySet()) {
//         System.out.println("ClientId: " + entry.getKey() + ", Sum of Incomes: " + entry.getValue());
//     }
// end


rule "Generate Alarm Report"
    when
        $alarm: Alarm()
    then
        System.out.println("Dodan je alarm");
        String description = "Alarm happened: " + $alarm.getDescription();
        Report report = new Report(1L, -1, description, new Timestamp(System.currentTimeMillis()), $alarm.getClientId());
        insert(report);
end


rule "Generate Too Many Alarms Report"
    when
        $alarm: Alarm(level == Alarm.Level.LOW, $clientId: clientId)
        Number(intValue >= 2) from accumulate(
            $alarm2: Alarm(
                this != $alarm,
                level == Alarm.Level.LOW,
                clientId == $clientId, 
                this after[0s, 1209600000ms] $alarm
            ),
            count($alarm2)
        )
    then
        System.out.println("Dodano je alarm upozorenje");
        Alarm alarm = new Alarm(1L, "Many low priority alarms happened. Please check what is going on.", Alarm.Level.MEDIUM, $clientId);
        insert(alarm);
end
